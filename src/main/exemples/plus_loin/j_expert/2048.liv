// Inspiré par https://github.com/mevdschee/2048.c
globale
	lp valant 100 // largeur_piece d'une pièce
	table est une toile, couleur prend "blanc crème", largeur prend lp * 4, hauteur prend lp * 4, 	pointeur prend "main"
	grille valant {0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0}
	nombres est un casier de graffiti
	rectangles est un casier de rectangle

principale : // pour jouer : glisser la souris dans le sens de l'action ou utiliser les fléches du clavier.
	doigt est un rectangle, largeur prend lp * 4, hauteur prend lp * 4, plein prend "oui", position prend 10, transparence prend 0
	position est un nombre
	t est un texte
	début
		projette doigt
		fais réagir doigt à "glisser-déposer" pour glisser
		pour 4 // On affiche la grille
			ligne & ligne_v est une ligne
			couleur de ligne & couleur de ligne_v prend "mordoré"
			x1 de ligne & y1 de ligne_v prend 0
			x2 de ligne & y2 de ligne_v prend lp * 4
			y1 de ligne & y2 de ligne  prend joker * lp
			x1 de ligne_v & x2 de ligne_v  prend joker * lp
			projette ligne & ligne_v
		ferme
		pour 4 // On initialise l'affichage des nombres
			x est un nombre valant joker
			pour 4 // y
				texte est un graffiti, taille prend 10, position prend 2
				fond est un rectangle, largeur prend lp - 20, hauteur prend lp - 20, plein prend "oui", couleur prend "blanc"
				x de texte prend x * lp + lp/4
				y de texte prend joker * lp + lp/2
				x de fond prend x * lp + 10
				y de fond prend joker * lp + 10
				projette texte & fond
				ajoute texte dans nombres
				ajoute fond dans rectangles
			ferme
		ferme
		pour 2 parcours ajoute nombre
		parcours afficher grille
		tant que vrai
			temporise
			t prend touche
			si t = "gauche" parcours action avec "gauche"
			si t = "droite" parcours action avec "droite"
			si t = "bas" parcours action avec "bas"
			si t = "haut" parcours action avec "haut"
		ferme

glisser :
	*doigt est un rectangle
	x valant x de doigt
	y valant y de doigt
	angle valant ter(x=0,90,abs(atan (y/x)))
	sens est un texte
	début
		x de doigt & y de doigt prend 0
		si ((x >= 0) et (y >= 0)) et (angle >= 45), sens prend "bas"
		sinon si ((x >= 0) et (y >= 0)) et (angle <= 45), sens prend "droit"
		sinon si ((x <= 0) et (y >= 0)) et (angle >= 45), sens prend "bas"
		sinon si ((x <= 0) et (y >= 0)) et (angle <= 45), sens prend "gauche"
		sinon si ((x <= 0) et (y <= 0)) et (angle >= 45), sens prend "haut"
		sinon si ((x <= 0) et (y <= 0)) et (angle <= 45), sens prend "gauche"
		sinon si ((x >= 0) et (y <= 0)) et (angle >= 45), sens prend "haut"
		sinon si ((x >= 0) et (y <= 0)) et (angle <= 45), sens prend "droite"
		parcours action avec sens
		reviens

action :
	* sens est un texte
	indicateur est un drapeaux // permet de savoir si un nombre à bougé
	début
		parcours pousse grille avec sens, indicateur
		si indicateur parcours ajoute nombre
		parcours afficher grille
		reviens

afficher grille :
	début
		pour 4 // On initialise l'affichage des nombres
			x valant joker
			pour 4 // y
				valeur est un nombre valant grille{x,joker}
				texte de (nombres{x+joker*4}) prend ter(valeur=0,"",valeur)
				si valeur = 0, transparence de (rectangles{x+joker*4}) prend 0
				sinon
					transparence de (rectangles{x+joker*4}) prend 100
					si valeur = 2, couleur de (rectangles{x+joker*4}) prend "blanc"
					si valeur = 4, couleur de (rectangles{x+joker*4}) prend "lin"
					si valeur = 8, couleur de (rectangles{x+joker*4}) prend "mandarine"
					si valeur = 16, couleur de (rectangles{x+joker*4}) prend "lavande"
					si valeur = 32, couleur de (rectangles{x+joker*4}) prend "nacarat"
					si valeur = 64, couleur de (rectangles{x+joker*4}) prend "zinzolin"
					si valeur = 128, couleur de (rectangles{x+joker*4}) prend "framboise"
					si valeur = 256, couleur de (rectangles{x+joker*4}) prend "rose"
					si valeur = 512, couleur de (rectangles{x+joker*4}) prend "cerise"
					si valeur = 1024, couleur de (rectangles{x+joker*4}) prend "fuchsia"
					si valeur = 2048, couleur de (rectangles{x+joker*4}) prend "écarlate"
				ferme
			ferme
		ferme
		reviens

pousse grille :
	* sens est un texte
	* indicateur est un drapeaux
	transformation est un nombre
	début
		si sens = "haut", transformation prend 3
		sinon si sens = "gauche", transformation prend 2
		sinon si sens = "bas", transformation prend 1
		sinon si sens = "droite", transformation prend 0
		pour transformation parcours rotation grille
		pour chaque grille //Bug Linotte si sur une même ligne
			parcours pousse ligne avec joker, indicateur
		ferme
		pour 4 - transformation parcours rotation grille
		reviens

pousse ligne :
	* ligne est un casier de nombre
	* indicateur est un drapeaux
	index est un nombre
	passer est un drapeau valant faux
	boucler est un drapeau valant vrai
	début
		passer prend faux
		pour index de 0 à 3 // On regroupe les nombres identiques
			si non(passer)
				courant est un nombre valant ligne{index}
				si index < 3
					suivant est un nombre valant ligne {index + 1}
					si suivant = 0
						ligne{index + 1} prend courant
						ligne{index} prend 0
						si courant !=0, indicateur prend vrai
					ferme
					sinon si courant = suivant
						ligne{index} prend 0
						ligne {index + 1} prend suivant * 2
						passer prend vrai
						indicateur prend vrai
					ferme
				ferme
			ferme
			sinon passer prend faux
		ferme
		tant que boucler // On pousse tout à droite !
			boucler prend faux // On boucle tant que l'on déplace des pièces
			pour index de 0 à 3
				courant est un nombre valant ligne{index}
				si index < 3
					suivant est un nombre valant ligne {index + 1}
					si (suivant = 0) et (courant !=0)
						ligne{index + 1} prend ligne{index}
						ligne{index} prend 0
						indicateur prend vrai
						boucler prend vrai
					ferme
				ferme
			ferme
		ferme
		reviens

rotation grille :
	i & j est un nombre
	début
		pour i de 0 à 1
			pour j de i à 4-i-2
				temp est un nombre valant grille {i,j}
				grille {i,j} prend grille {j,4-i-1}
				grille {j,4-i-1} prend grille {4-i-1,4-j-1}
				grille {4-i-1,4-j-1} prend grille {4-j-1,i}
				grille {4-j-1,i} prend temp
			ferme
		ferme
		reviens

ajoute nombre :
	matrice valant {0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}
	x & y & taille & r & n est un nombre
	début
		pour x de 0 à 3
			pour y de 0 à 3
				si (grille{x,y}) = 0
					matrice{taille,0} prend x
					matrice{taille,1} prend y
					incrémente taille
				ferme
			ferme
		ferme
		si taille > 0
			r prend hasard(taille)
			x prend matrice{r,0}
			y prend matrice{r,1}
			n prend entier((hasard(10)/9+1))*2
			grille{x,y} prend n
		ferme
		reviens