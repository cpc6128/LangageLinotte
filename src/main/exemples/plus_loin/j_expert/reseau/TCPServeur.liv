/*
Serveur d'un salon de discution virtuel
*/
bibliothèque
	commun référence TCPCommun.liv
espèces
	nom est un texte
	socket est un nombre
	espèce messager contient nom, socket
globale
	VERSION_SERVEUR est un nombre valant 0.2
	PORT est un nombre valant 7779
	HISTORIQUE_MAX est un nombre valant 20
	serveur est un tcpserveur
	clients est un casier de messager
	bavard est un drapeau valant faux
	form est un formulaire, titre prend "Le serveur de messagers Linotte", largeur prend 470, hauteur prend 400
	tableau est un xtableau, x prend 10, y prend 10, largeur prend 420, hauteur prend 280
	welcome est un champ, taille prend 40, x prend 10, y prend 300, texte prend "Bienvenue sur le serveur des messagers Linotte de " + serveur.ip()
	deconnecter est un bouton, texte prend "Arrêter le serveur", x prend 10, y prend 350
	historique est un casier de packet

démarrage :
	début
		ajoute tableau & deconnecter & welcome dans form
		fais réagir deconnecter à "clic souris" pour déconnexion
		fais réagir form à  "clic souris" pour déconnexion
		form.changementdimension(faux)
		// On démarre le serveur :
		serveur.démarrer(PORT)
		affiche "Serveur démarré"
		affiche "IP de la machine " + serveur.ip()
		affiche "PORT du serveur " + PORT
		essaie
			tant que vrai
				client est un messager
				si bavard, affiche "! on attend l'ouverture d'une nouvelle socket..."
				socket@client prend serveur.attendreconnexion()
				//affiche "! un client sur la socket " + socket@client + " vient de se connecter !"
				ajoute client dans clients
				appelle gestion client avec client
			ferme
		ferme
		affiche "! le serveur est arrêté..."
		attends 2 secondes

gestion client :
	* client est un messager
	début
		// On va effectuer une commande ping pour obtenir son identifiant.
		parcours ping avec client
		essaie
			tant que vrai
				message est un packet
				message prend serveur.recevoir(socket@client)
				si bavard, affiche "< le client " + nom@message + " a dit : " + message@message
				nom@client prend nom@message
				si bavard, affiche "< commande reçue : " + commande@message
				// *******************
				// Commande HISTORIQUE
				// *******************
				si (commande@message) == "historique"
					si bavard, affiche "Historique demandé"
					pour chaque historique
						essaie serveur.envoyer(socket@client, joker)
					ferme
				ferme
				// ****************
				// Commande VERSION
				// ****************
				sinon si (commande@message) == "version"
					message2 est un packet
					si bavard, affiche "Version demandée"
					commande@message2 prend "version"
					message@message2 prend "version " + VERSION_SERVEUR + ", il est " + heure + "h " + minute + "m " + seconde + "s, Linotte " + version + "
" + texte@welcome
					essaie serveur.envoyer(socket@client, message2)
					sinon
						affiche "! impossible d'envoyer la version à " + nom@joker
					ferme
				ferme
				// *******************
				// Commande LISTE AMIS
				// *******************
				sinon si (commande@message) == "liste amis"
					amis est un texte
					message2 est un packet
					pour chaque clients, amis prend amis + nom@joker + "|"
					si bavard, affiche "Liste d'amis : " + amis
					commande@message2 prend "liste amis"
					message@message2 prend amis
					essaie serveur.envoyer(socket@client, message2)
					sinon
						affiche "! impossible d'envoyer la liste d'amis à " + nom@joker
					ferme
				ferme
				// ****************
				// Commande PONG
				// ****************
				sinon si (commande@message) == "pong"
					affiche "Ping pong avec " + nom@client + " sur la socket n°" + socket@client
				ferme				// ****************
				// Commande QUITTER
				// ****************
				sinon si (commande@message) == "quitter"
					ôte client de clients
					serveur.fermer(socket@client)
					affiche "! Le client " + nom@client + " a quitter le serveur sur la socket n°" + socket@client
					reviens
				ferme
				// ***************
				// Commande PARLER
				// ***************
				sinon si (commande@message) == "parler"
					parcours historiser avec message
					// Propagation de la discution...
					appelle propager message avec message
				ferme
				sinon
					affiche "! je ne sais pas quoi faire de cette commande " + commande@message
				ferme
			ferme
		ferme
		sinon
			affiche "! Le client " + nom@client + " a perdu la connexion sur la socket n°" + socket@client
			ôte client de clients
		ferme

propager message :
	* message est un packet
	début
		pour chaque clients
			si bavard, affiche "> envoyer le message '" + message@message + "' de " + nom@message + " à " + nom@joker
			essaie serveur.envoyer(socket@joker, message)
			sinon
				affiche "! impossible d'envoyer le message à " + nom@joker
			ferme
		ferme

historiser :
	*message est un packet
	taille est un nombre
	début
		// On veut garder les dix dernières messages en mémoire
		ajoute message dans historique
		mesure historique dans taille
		tant que taille > HISTORIQUE_MAX
			ôte historique{0} de historique
			mesure historique dans taille
		ferme
		reviens

déconnexion :
	début
		affiche "! on ferme toutes les sockets ouvertes avec le serveur"
		pour chaque clients
			affiche "! on termine la connexion avec " + nom@joker
			essaie serveur.fermer(socket@joker)
		ferme
		affiche "! bye bye !"
		serveur.arrêter()
		reviens

ping :
	*client est un messager
	message est un packet
	début
		commande@message prend "ping"
		essaie serveur.envoyer(socket@client, message)
		sinon
			affiche "! impossible d'envoyer un ping sur le socket " + socket@client
		ferme
		reviens