// Création d'un casse-brique en seulement 100 lignes !
espèces
	fluctuation est un nombre
	orientation est un nombre
	espèce palet hérite de cercle et contient fluctuation, orientation
globale
	zoom est un nombre valant 2 /*Vous pouvez modifier la taille du jeu */
	vitesse est un nombre valant 10
	briques est un casier de rectangle
	palet est un palet,  plein prend "oui", rayon prend 5 * zoom, couleur prend "rouge", taille prend 1,
			y prend 80 * zoom, x prend 100,		angle prend 45, position prend 2, fluctuation prend 45
	raquette est un rectangle, couleur prend "anthracite", hauteur prend 5 * zoom,
			largeur prend 26 * zoom, plein prend "oui",  x prend 10 * zoom, 		y prend 140 * zoom

principale : /* affichage du jeu et lancement du jeu */
	fond  est une toile, couleur prend "argile", hauteur prend 150 * zoom, largeur prend 200 * zoom
	début
		projette fond & palet & raquette
		parcours affichage matrice
		appelle moteur palet
		tant que vrai
			x est un nombre valant sourisx - 12
			x de raquette prend ter(x > (175 * zoom), 175 * zoom, ter( x < 0, 0 , x))
			temporise
		Ferme

moteur palet : /*Détermine le chemin que doit suivre le palet en fonction des obstacles*/
	début
		tant que vrai
			attends vitesse millisecondes
			avance palet de 1 * zoom
			si palet.collision(raquette)
				fluctuation de palet prend 50-abs( x de palet-(largeur de raquette/2+x de raquette))
				y de palet prend (y de raquette)-(hauteur de raquette) //le palet colle la raquette !
				parcours tourne palet simple avec 0
			ferme
			sinon si (x de palet) > (200 * zoom - (rayon de palet)) parcours tourne palet simple avec 1
			sinon si (y de palet) < (5 * zoom) parcours tourne palet simple avec 0
			sinon si (x de palet) < (5 * zoom) parcours tourne palet simple avec 1
			sinon si (y de palet) > (140 * zoom) termine // Palet sous la raquette !
			pour chaque briques /*Gestion des collisions avec les briques*/
				si palet.collision(joker)
					ôte joker de briques
					appelle détruire brique avec joker
					parcours tourne palet avec joker
				ferme
			ferme
		ferme
		reviens

détruire brique : /* supprime la brique joliment */
	*brique est un rectangle
	début
		pour 100 
			attends 5 millisecondes
			transparence de brique prend 100 - joker
			déplace brique vers le bas de 2
		ferme
		reviens

tourne palet simple : /* change l'orientation du palet sur le mur ou la raquette*/
	*orientation est un nombre /*0 horizontal, 1 vertical*/
	début
		si orientation = 0, orientation de palet prend {3,2,1,0}{orientation de palet}
		sinon orientation de palet prend {1,0,3,2}{orientation de palet}
		parcours calculer angle
		reviens

tourne palet : /* change l'orientation du palet lors d'un choc sur une brique*/
	*b est un rectangle
	orientation est un nombre valant 0 /*0 = choc horizontal, 1 = choc vertical*/
	début
		recule palet de 1 * zoom
		si (( y de palet) - (rayon de palet)) > (y de b + hauteur de b), orientation prend 1
		sinon si (arrondi ((y de palet) + (rayon de palet))) == (y de b), orientation prend 1
		si orientation = 1, orientation de palet prend {3,2,1,0}{orientation de palet}
		sinon orientation de palet prend {1,0,3,2}{orientation de palet}
		parcours calculer angle
		reviens

calculer angle : /* calcule l'angle que doit suivre le palet (en degree) */
	début
		si (orientation de palet) = 0, angle de palet prend fluctuation de palet
		sinon si (orientation de palet) = 1, angle de palet prend 180 - (fluctuation de palet)
		sinon si (orientation de palet) = 2, angle de palet prend 180 + (fluctuation de palet)
		sinon angle de palet prend 360 - (fluctuation de palet)
		reviens

affichage matrice : /* Affiche les briques */
	r est un nombre
	début
		pour r de 0 à 9
			de 0 à 6
				p est un rectangle, couleur prend "prasin", hauteur prend 10*zoom-2,
					largeur prend 20*zoom-2, x prend r*20*zoom, y prend joker*10*zoom, plein prend "oui"
				projette p
				ajoute p dans briques
			ferme
		ferme
		reviens