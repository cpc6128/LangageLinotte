/*Version 	: 0.1
Auteurs	: cpc6128,zamirh
Date		: novembre 2010*/
espèces
	initx & inity & posx & posy & posinitx & posinity & score & niveau est un nombre
	init & télétransporté & malade & mangé est un drapeau valant faux
	espèce partie contient score, niveau
	espèce personnage hérite de praxinoscope et contient  posx, posy, posinitx, posinity, init, initx, inity, télétransporté, malade, mangé
globale
	gGameOver est un graffiti, texte prend "GAME OVER", position prend 100000, taille prend 20, x prend 150, y prend 250, couleur prend "rouge"
	icônelifes1 est un graphique, image prend "pac1.png", x prend 380, y prend 475, position prend 100000
	icônelifes2 est un graphique, image prend "pac1.png", x prend 400, y prend 475, position prend 100000
	lifes est un graffiti, texte prend "LIFES", couleur prend "jaune", taille prend 10, position prend 100000, x prend 300, y prend 490
	Titre Score est un graffiti, texte prend "SCORE", couleur prend "jaune", taille prend 10, position prend 100000, x prend 30, y prend 490
	gScore est un graffiti, texte prend "0", couleur prend "jaune", taille prend 10, position prend 100000, x prend 130, y prend 490
	vie est un nombre valant 3
	vitesse est un nombre valant 10
	taille est un nombre valant 15
	x est un nombre valant 50
	y est un nombre valant 30
	pacpacpac est un nombre valant 0
	image jeu est une toile, couleur prend "noir", largeur prend 500, hauteur prend 500
	fond est un graphique,y prend 150, image prend "logo.png", position prend 3,  transparence prend 10
	quitter est un nombre valant 0
	pacman est un personnage, position prend 1, image0 prend "pac1.png", image1 prend  "pac2.png"
	fantome est un personnage, position prend 1, image0 prend "fantome1.png", image1 prend "fantome2.png", image2 prend "fantome3.png", 
						image3 prend "fantome4.png", image4 prend "fantome5.png", image5 prend "fantome6.png", image6 prend "fantome7.png"
	fantome1 est un personnage, position prend 1, image0 prend "fantome1.png", image1 prend "fantome2.png", image2 prend "fantome3.png",
                image3 prend "fantome4.png", image4 prend "fantome5.png", image5 prend "fantome6.png", image6 prend "fantome7.png"
	fantome2 est un personnage, position prend 1, image0 prend "fantome1.png", image1 prend "fantome2.png", image2 prend "fantome3.png",
                image3 prend "fantome4.png", image4 prend "fantome5.png", image5 prend "fantome6.png", image6 prend "fantome7.png"
	fantome3 est un personnage, position prend 1, image0 prend "fantome1.png", image1 prend "fantome2.png", image2 prend "fantome3.png",
                image3 prend "fantome4.png", image4 prend "fantome5.png", image5 prend "fantome6.png", image6 prend "fantome7.png"
	niveau courant est un casier de nombre
	niveau courant image est un casier de graphique
	direction est un texte
	touches est un casier de texte valant "gauche", "droite", "haut", "bas"
    /*Pièces :*/
	a est un nombre valant 27
	b est un nombre valant -27
	c est un nombre valant 10
	d est un nombre valant 11
	e est un nombre valant 12
	f est un nombre valant 13
	g est un nombre valant 14
	sensh est un casier de texte valant "gauche", "droite"
	sensv est un casier de texte valant "haut", "bas"
	boules est un casier de graphique
	image0 est un graphique, image prend "vide.png"
	image1 est un graphique, image prend "diamant.png"
	image2 est un graphique, image prend "vide.png"
	image3 est un graphique, image prend "pack.png"
	image4 est un graphique, image prend "mur_h.png"
	image5 est un graphique, image prend "mur_v.png"
	image6 est un graphique, image prend "mur_gh.png"
	image7 est un graphique, image prend "mur_dh.png"
	image8 est un graphique, image prend "mur_gb.png"
	image9 est un graphique, image prend "mur_db.png"
	image10 est un graphique, image prend "vide.png"
	pieces est un casier de graphique valant image0, image1, image2, image3, image4, image5, image6, image7, image8, image9,
                  image10, image10, image10, image10, image10
	niveau1 est un casier de nombre valant 28, 31, 
                6,4,4,4,4,4,4,4,4,4,4,4,4,7,6,4,4,4,4,4,4,4,4,4,4,4,4,7,
                5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,
                5,1,6,4,4,7,1,6,4,4,4,7,1,5,5,1,6,4,4,4,7,1,6,4,4,7,1,5,
                5,3,5,0,0,5,1,5,0,0,0,5,1,5,5,1,5,0,0,0,5,1,5,0,0,5,3,5,
                5,1,8,4,4,9,1,8,4,4,4,9,1,8,9,1,8,4,4,4,9,1,8,4,4,9,1,5,
                5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,
                5,1,6,4,4,7,1,6,7,1,6,4,4,4,4,4,4,7,1,6,7,1,6,4,4,7,1,5,
                5,1,8,4,4,9,1,5,5,1,8,4,4,7,6,4,4,9,1,5,5,1,8,4,4,9,1,5,
                5,1,1,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,1,1,5,
                8,4,4,4,4,7,1,5,8,4,4,7,0,5,5,0,6,4,4,9,5,1,6,4,4,4,4,9,
                0,0,0,0,0,5,1,5,6,4,4,9,0,8,9,0,8,4,4,7,5,1,5,0,0,0,0,0,
                0,0,0,0,0,5,1,5,5,0,0,0,0,0,0,0,0,0,0,5,5,1,5,0,0,0,0,0,
                0,0,0,0,0,5,1,5,5,0,6,4,4,g,g,4,4,7,0,5,5,1,5,0,0,0,0,0,
                4,4,4,4,4,9,1,8,9,0,5,0,0,g,g,0,0,5,0,8,9,1,8,4,4,4,4,4,
                a,0,0,0,0,0,1,0,0,0,5,0,0,d,e,0,0,5,0,0,0,1,0,0,0,0,0,b,
                4,4,4,4,4,7,1,6,7,0,5,0,0,c,f,0,0,5,0,6,7,1,6,4,4,4,4,4,
                0,0,0,0,0,5,1,5,5,0,5,0,0,0,0,0,0,5,0,5,5,1,5,0,0,0,0,0,
                0,0,0,0,0,5,1,5,5,0,8,4,4,4,4,4,4,9,0,5,5,1,5,0,0,0,0,0,
                0,0,0,0,0,5,1,5,5,0,0,0,0,0,0,0,0,0,0,5,5,1,5,0,0,0,0,0,
                6,4,4,4,4,9,1,8,9,0,4,4,4,7,6,4,4,4,0,8,9,1,8,4,4,4,4,7,
                5,1,1,1,1,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,1,1,1,1,1,1,5,
                5,1,6,4,4,7,1,6,4,4,4,7,1,5,5,1,6,4,4,4,7,1,6,4,4,7,1,5,
                5,1,8,4,7,5,1,8,4,4,4,9,1,8,9,1,8,4,4,4,9,1,5,6,4,9,1,5,
                5,3,1,1,5,5,1,1,1,1,1,1,1,2,0,1,1,1,1,1,1,1,5,5,1,1,3,5,
                8,4,7,1,5,5,1,6,7,1,6,4,4,4,4,4,4,7,1,6,7,1,5,5,1,6,4,9,
                6,4,9,1,8,9,1,5,5,1,8,4,4,7,6,4,4,9,1,5,5,1,8,9,1,8,4,7,
                5,1,1,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,5,5,1,1,1,1,1,1,5,
                5,1,6,4,4,4,4,9,8,4,4,7,1,5,5,1,6,4,4,9,8,4,4,4,4,7,1,5,
                5,1,8,4,4,4,4,4,4,4,4,9,1,8,9,1,8,4,4,4,4,4,4,4,4,9,1,5,
                5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,
                8,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9
	niveaux est un casier de casier valant niveau1
       /*Acteurs du jeu*/
	jeu est un partie,niveau prend 0, score prend 0
	largeur est un nombre
principale :
	toile est une toile
	début
		quitter prend 0
		/*Initialiser les moteurs :*/
		appelle gestion touches
		parcours affichage niveau avec niveaux{niveau@jeu}
		/*on commence le jeu :*/
		projette fond
		projette lifes
		projette icônelifes1
		projette icônelifes2
		projette Titre Score & gScore
		projette pacman
		projette fantome & fantome1 & fantome2 & fantome3
		appelle animation pacman
		appelle animation fantome
		appelle moteur pacman
		appelle moteur fantome avec fantome
		appelle moteur fantome avec fantome1
		appelle moteur fantome avec fantome2
		appelle moteur fantome avec fantome3
		appelle clignotement
		parcours initialisation des personnages
		/*boucle infinie*/
		tant que vrai lis
			attends 1 seconde
		ferme
		termine

affichage niveau :
	*niveau est un casier de nombre
	largeur temporaire est un nombre
	hauteur est un nombre valant niveau{1}
	hauteur temporaire est un nombre
	position est un nombre valant 2
	image fond est un rectangle, couleur prend "noir", plein prend "oui"
	bug est un nombre
	début
		largeur prend niveau{0}
		largeur@image fond prend largeur * taille
		hauteur@image fond prend hauteur * taille
		vide niveau courant
		efface toile
		projette image jeu
		parcours calculer x et y avec largeur, hauteur,largeur@image fond, hauteur@image fond
		x@image fond prend x
		y@image fond prend y
		/*On boucle est  le niveau :*/
		/*affiche niveau*/
		projette image fond
		pour chaque hauteur lis
			largeur temporaire prend 0
			pour chaque largeur lis
				si ((niveau{position}) < 20) et ((niveau{position}) > 0) lis
					ajoute affichage image (niveau{position}, largeur temporaire, hauteur temporaire) dans niveau courant image
				ferme
				sinon ajoute affichage image (0, largeur temporaire, hauteur temporaire) dans niveau courant image
				bug prend niveau{position}
				si bug = c lis
					bug prend g
				ferme
				sinon si bug = d lis
					bug prend g
				ferme
				sinon si bug = e lis
					bug prend g
				ferme
				sinon si bug = f lis
					bug prend g
				ferme
				ajoute #bug dans niveau courant
				position prend position + 1
				largeur temporaire prend largeur temporaire + 1
			ferme
			hauteur temporaire prend hauteur temporaire + 1
		ferme
		reviens

affichage image :
	*type est un nombre
	*largeur est un nombre
	*hauteur est un nombre
	image est un casier de graphique
	début
		si type = 2 lis
			x@pacman prend x+largeur*taille
			y@pacman prend y+hauteur*taille
			posx@pacman prend largeur
			posy@pacman prend hauteur
			posinitx@pacman prend largeur
			posinity@pacman prend hauteur
			initx@pacman prend x@pacman
			inity@pacman prend y@pacman
		ferme
		sinon si type = c lis
			x@fantome prend x+largeur*taille
			y@fantome prend y+hauteur*taille
			posx@fantome prend largeur
			posy@fantome prend hauteur
			posinitx@fantome prend largeur
			posinity@fantome prend hauteur
			initx@fantome prend x@fantome
			inity@fantome prend y@fantome
		ferme
		sinon si type = d lis
			x@fantome1 prend x+largeur*taille
			y@fantome1 prend y+hauteur*taille
			posx@fantome1 prend largeur
			posy@fantome1 prend hauteur
			posinitx@fantome1 prend largeur
			posinity@fantome1 prend hauteur
			initx@fantome1 prend x@fantome1
			inity@fantome1 prend y@fantome1
		ferme
		sinon si type = e lis
			x@fantome2 prend x+largeur*taille
			y@fantome2 prend y+hauteur*taille
			posx@fantome2 prend largeur
			posy@fantome2 prend hauteur
			posinitx@fantome2 prend largeur
			posinity@fantome2 prend hauteur
			initx@fantome2 prend x@fantome2
			inity@fantome2 prend y@fantome2
		ferme
		sinon si type = f lis
			x@fantome3 prend x+largeur*taille
			y@fantome3 prend y+hauteur*taille
			posx@fantome3 prend largeur
			posy@fantome3 prend hauteur
			posinitx@fantome3 prend largeur
			posinity@fantome3 prend hauteur
			initx@fantome3 prend x@fantome3
			inity@fantome3 prend y@fantome3
		ferme
		ajoute #(pieces {type})  dans image
		si type = 3 lis
			ajoute image{0} dans boules
		ferme
		x@(image{0}) prend x+largeur*taille
		y@(image{0}) prend y+hauteur*taille
		projette image{0}
		retourne image{0}

calculer X et Y :
	*largeur est un nombre
	*hauteur est un nombre
	*delta l est un nombre
	*delta h est un nombre
	début
		x prend ( largeur@image jeu - largeur ) / 2 - delta l / 2
		y prend ( hauteur@image jeu - hauteur) / 2 - delta h / 2
		reviens

gestion touches :
	t est un texte
	i est un nombre
	début
		Vide touches
		Tant que vrai lis
			temporise
			t prend touche
			cherche i, la position de t dans touches
			si i != 0, direction prend t
		Ferme

moteur fantome :
	*monstre est un personnage
	sens est un texte valant "haut"
	sens temporaire est un texte
	dé est un nombre
	positionx est un texte
	positiony est un texte
	largeur & hauteur est un nombre
	temps est un nombre
	début
		Tant que vrai lis
			si init@monstre lis
				posx@monstre prend posinitx@monstre
				posy@monstre prend posinity@monstre
				x@monstre prend initx@monstre
				y@monstre prend inity@monstre
				init@monstre prend faux
				malade@monstre prend faux
				mangé@monstre prend faux
				sens prend "haut"
			ferme
			/*Gestion de la vitesse*/
			si malade@monstre, temps prend vitesse *2
			sinon temps prend vitesse
			Si sens = "haut" lis
				si vérifier position fantome(posx@monstre,posy@monstre-1) lis
					pour chaque 15 lis
						y@monstre prend y@monstre - 1
						/*Est-ce que j'ai de quoi manger ?*/
						Parcours tester contacte avec monstre
						attends temps milliseconde
					ferme
					posy@monstre prend posy@monstre - 1
				ferme
				sinon lis
					sens temporaire prend sens
					vide sens
				ferme
			Ferme
			Si sens = "bas" lis
				si vérifier position fantome(posx@monstre,posy@monstre+1) lis
					/*Il ne doit pas revenir dans la boite*/
					si (niveau courant{(posx@monstre) + largeur * (posy@monstre)}) diff g lis
						pour chaque 15 lis
							y@monstre prend y@monstre + 1
							/*Est-ce que j'ai de quoi manger ?*/
							Parcours tester contacte avec monstre
							attends temps milliseconde
						ferme
						posy@monstre prend posy@monstre + 1
					ferme
					sinon sens prend "haut"
				ferme
				sinon lis
					sens temporaire prend sens
					vide sens
				ferme
			Ferme
			Si sens = "droite" lis
				si vérifier position fantome(posx@monstre-1,posy@monstre) lis
					pour chaque 15 lis
						x@monstre prend x@monstre - 1
						/*Est-ce que j'ai de quoi manger ?*/
						Parcours tester contacte avec monstre
						attends temps milliseconde
					ferme
					posx@monstre prend posx@monstre - 1
				ferme
				sinon lis
					sens temporaire prend sens
					vide sens
				ferme
			Ferme
			Si sens = "gauche" lis
				si vérifier position fantome(posx@monstre+1,posy@monstre) lis
					pour chaque 15 lis
						x@monstre prend x@monstre + 1
						/*Est-ce que j'ai de quoi manger ?*/
						Parcours tester contacte avec monstre
						attends temps milliseconde
					ferme
					posx@monstre prend posx@monstre + 1
				ferme
				sinon lis
					sens temporaire prend sens
					vide sens
				ferme
			Ferme
			si sens = "" lis
				/*Il est face à un mur*/
				sens prend nouvelle direction fantome (sens temporaire)
			ferme
			sinon lis
				si (niveau courant{(posx@monstre) + largeur * (posy@monstre)}) diff g lis
				/*At-il un mur sur son côté ?*/
					Dé prend 1
					si dé = 1 lis
						/*On ne tourne que si on va dans le sens de pacman.... miam, j'ai faim !*/
						si non(malade@monstre) lis
							si (posx@monstre) < (posx@pacman), positionx prend "gauche"
							si (posx@monstre) > (posx@pacman), positionx prend "droite"
							si (posy@monstre) < (posy@pacman), positiony prend "bas"
							si (posy@monstre) > (posy@pacman), positiony prend "haut"
						ferme
						/*Chui malade, je rentre !*/
						sinon si mangé@monstre lis
							si (posx@monstre) < largeur / 2, positionx prend "gauche"
							si (posx@monstre) > largeur / 2, positionx prend "droite"
							si (posy@monstre) < hauteur / 2, positiony prend "bas"
							si (posy@monstre) > hauteur / 2, positiony prend "haut"
						ferme
						sinon lis
							/*Sauve qui peut !*/
							si (posx@monstre) < (posx@pacman), positionx prend "droite"
							si (posx@monstre) > (posx@pacman), positionx prend "gauche"
							si (posy@monstre) < (posy@pacman), positiony prend "haut"
							si (posy@monstre) > (posy@pacman), positiony prend "bas"
						ferme
						si sens = "gauche" lis
							/*on regarde en haut*/
							si vérifier position fantome(posx@monstre,posy@monstre-1) lis
								si positiony = "haut", sens prend "haut"
							ferme
							sinon lis
								/*on regarde en bas*/
								si vérifier position fantome(posx@monstre,posy@monstre+1) lis
									si positiony = "bas", sens prend "bas"
								ferme
							ferme
						ferme
						sinon si sens = "bas" lis
							/*on regarde à droite*/
							si vérifier position fantome(posx@monstre -1,posy@monstre) lis
								si positionx = "droite", sens prend "droite"
							ferme
							sinon lis
								/*on regarde à gauche*/
								si vérifier position fantome(posx@monstre +1,posy@monstre) lis
									si positionx = "gauche", sens prend "gauche"
								ferme
							ferme
						ferme
						sinon si sens = "droite" lis
                        /*on regarde en haut*/
							si vérifier position fantome(posx@monstre,posy@monstre-1) lis
								si positiony = "haut", sens prend "haut"
							ferme
							sinon lis
                            /*on regarde en bas*/
								si vérifier position fantome(posx@monstre,posy@monstre+1) lis
									si positiony = "bas", sens prend "bas"
								ferme
							ferme
						ferme
						sinon si sens = "haut" lis
                        /*on regarde à droite*/
							si vérifier position fantome(posx@monstre -1,posy@monstre) lis
								si positionx = "droite", sens prend "droite"
							ferme
							sinon lis
                            /*on regarde à gauche*/
								si vérifier position fantome(posx@monstre +1,posy@monstre) lis
									si positionx = "gauche", sens prend "gauche"
								ferme
							ferme
						ferme
					ferme
				ferme
			ferme
			attends vitesse milliseconde
			parcours télétransportation avec posx@monstre,posy@monstre,monstre
		Ferme

nouvelle direction fantome :
	*sens est un texte
	dé est un nombre valant 2
	t est un nombre
	début
		mélange dé
		cherche t, la position de sens dans sensv
		si t != 0 lis
			sens prend sensh {dé}
		ferme
		sinon sens prend sensv {dé}
		retourne sens

moteur pacman :
	temp est un texte
	début
		Tant que vrai lis
			si init@pacman lis
				posx@pacman prend posinitx@pacman
				posy@pacman prend posinity@pacman
				x@pacman prend initx@pacman
				y@pacman prend inity@pacman
				init@pacman prend faux
			ferme
			temp prend direction
			Si temp = "gauche" lis
				si vérifier position(posx@pacman-1,posy@pacman) lis
					angle@pacman prend 0
					pour chaque 15 lis
						x@pacman prend x@pacman - 1
						attends vitesse milliseconde
					ferme
					posx@pacman prend posx@pacman - 1
				ferme
			Ferme
			sinon si temp = "droite" lis
				si vérifier position(posx@pacman+1,posy@pacman) lis
					angle@pacman prend 180
					pour chaque 15 lis
						x@pacman prend x@pacman + 1
						attends vitesse milliseconde
					ferme
					posx@pacman prend posx@pacman + 1
				ferme
			Ferme
			sinon si temp = "bas" lis
				si vérifier position(posx@pacman,posy@pacman+1) lis
					angle@pacman prend 270
					pour chaque 15 lis
						y@pacman prend y@pacman + 1
						attends vitesse milliseconde
					ferme
					posy@pacman prend posy@pacman + 1
				Ferme
			Ferme
			sinon si temp = "haut" lis
				si vérifier position(posx@pacman,posy@pacman-1) lis
					angle@pacman prend 90
					pour chaque 15 lis
						y@pacman prend y@pacman - 1
						attends vitesse milliseconde
					ferme
					posy@pacman prend posy@pacman - 1
				Ferme
			Ferme
			attends vitesse milliseconde
			parcours télétransportation avec posx@pacman,posy@pacman,pacman
		Ferme

animation pacman :
	début
		Tant que vrai lis
			Pour chaque 2 lis
				Attends vitesse * 3 * 10 millisecondes
				trame@pacman prend joker
			Ferme
		Ferme

Animation fantome :
	début
		Tant que vrai lis
			Pour chaque 3 lis
				Attends vitesse * 50 millisecondes
				parcours change apparance avec fantome, joker
				parcours change apparance avec fantome1, joker
				parcours change apparance avec fantome2, joker
				parcours change apparance avec fantome3, joker
			Ferme
		Ferme

Change apparance :
	*monstre est un personnage
	*trame est un nombre
	début
		si mangé@monstre, trame@monstre prend 6
		sinon si malade@monstre, trame@monstre prend trame + 3
		sinon trame@monstre prend trame
		Reviens

Télétransportation :
	*tx est un nombre
	*ty est un nombre
	*spock est un personnage
	type est un nombre valant niveau courant{tx + largeur * ty}
	début
		si  type > 20 lis
            /*Le type correspond au delta*/
            /*angle@spock prend 180*/
			télétransporté@spock prend vrai
			pour chaque type lis
				pour chaque 15 lis
					x@spock prend x@spock + 1
					attends vitesse / 10 milliseconde
				ferme
				posx@spock prend posx@spock + 1
			ferme
			télétransporté@spock prend faux
		ferme
		si  type < 0 lis
            /*Le type correspond au delta*/
            /*angle@spock prend 0*/
			télétransporté@spock prend vrai
			pour chaque abs(type) lis
				pour chaque 15 lis
					x@spock prend x@spock - 1
					attends vitesse / 10 milliseconde
				ferme
				posx@spock prend posx@spock - 1
			ferme
			télétransporté@spock prend faux
		ferme
		Reviens

Vérifier position :
	*tx est un nombre
	*ty est un nombre
	type est un nombre valant niveau courant{tx + largeur * ty}
	début
		si type = 1 lis
            /*BOGUE Linotte 1.2.4, la ligne suivante ne marche pas si on n'utilise
            pas la variable bogue (cf plus haut). 
            Le codeur de Linotte programme comme ses pieds !*/
			niveau courant{tx + largeur * ty} prend 0
			si (transparence@(niveau courant image{tx + largeur * ty})) != 0 lis
				appelle effacer image avec niveau courant image{tx + largeur * ty}
			ferme
			parcours incrémentescore avec 1
			retourne vrai
		ferme
		sinon si type = 3 lis
			niveau courant{tx + largeur * ty} prend 0
			Ôte niveau courant image{tx + largeur * ty} de boules
			Efface niveau courant image{tx + largeur * ty}
			appelle pac pac pac
			parcours incrémentescore avec 10
			retourne vrai
		ferme
		sinon si ((type = 2)) ou (type = 0)  lis
			retourne vrai
		ferme
		sinon si  (type > 20) ou (type < 0) lis
			retourne vrai
		ferme
		sinon lis
			direction prend ""
			retourne faux
		ferme

Vérifier position fantome :
	*tx est un nombre
	*ty est un nombre
	type est un nombre valant niveau courant{tx + largeur * ty}
	début
		si type = 3 lis
			retourne vrai
		ferme
		sinon si ((type = 2)) ou (type = 0) lis
			retourne vrai
		ferme
		sinon si  (type > 20) ou (type < 0) lis
			retourne vrai
		ferme
		sinon si  type = 1 lis
			retourne vrai
		ferme
		sinon si  type = g lis
			retourne vrai
		ferme
		sinon lis
			retourne faux
		ferme

Effacer image :
	*g est un graphique
	boucle est un nombre valant transparence@g
	i est un nombre
	début
		Pour i de boucle à 0  lis
			attends vitesse  milliseconde
			transparence@g prend i
		Ferme
		reviens

Tester contacte :
	*monstre est un personnage
	début
		si monstre est en collision avec pacman lis
			si (posy@monstre) = (posy@pacman) lis
				si (posx@monstre) = (posx@pacman) lis
					si non(télétransporté@pacman) lis
						si non(malade@monstre) lis
							soustrais 1 dans vie
							va vers vies
						ferme
						sinon lis
							si non(mangé@monstre) lis
								parcours incrémentescore avec 30
								mangé@monstre prend vrai
							ferme
						ferme
					ferme
				ferme
			ferme
		ferme
		Reviens

Vies :
	début
		si vie = 0, parcours game over
		si vie = 2 lis
			efface icônelifes2
			va vers respawn
		ferme
		si vie = 1 lis
			efface icônelifes1
			va vers respawn
		ferme

Respawn :
	début
		init@pacman prend vrai
		init@fantome prend vrai
		init@fantome1 prend vrai
		init@fantome2 prend vrai
		init@fantome3 prend vrai
		va vers moteur fantome

Game Over :
	début
		Projette gGameOver
		Attends 3 secondes
		Termine

Clignotement :
	boucle est un nombre
	début
		Tant que vrai lis
			pour chaque boules lis
				boucle prend boucle + 2
				transparence de joker prend abs (cos boucle)  * 100
				attends vitesse millisecondes
			ferme
		Ferme
		Reviens

Pac pac pac :
	marqueur est un nombre
	début
		pacpacpac prend pacpacpac + 1
		marqueur prend pacpacpac
		malade@fantome prend vrai
		malade@fantome1 prend vrai
		malade@fantome2 prend vrai
		malade@fantome3 prend vrai
		attends 20 secondes
		si pacpacpac = marqueur lis
			parcours initialisation des personnages
		ferme
		Reviens

Initialisation des personnages :
	début
		malade@fantome prend faux
		malade@fantome1 prend faux
		malade@fantome2 prend faux
		malade@fantome3 prend faux
		mangé@fantome prend faux
		mangé@fantome1 prend faux
		mangé@fantome2 prend faux
		mangé@fantome3 prend faux
		Reviens

Incrémentescore :
	*val est un nombre
	début
		score@jeu prend score@jeu + val
		texte@gscore prend score@jeu
		Reviens