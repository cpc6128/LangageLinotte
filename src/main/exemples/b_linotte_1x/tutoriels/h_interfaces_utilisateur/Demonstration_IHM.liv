Démonstration IHM :
	Grands rôles :
		form :: formulaire, titre vaut "Démonstration : interface graphique avec Linotte ${version}", largeur vaut 800, hauteur vaut 600, icône vaut "medias/logo.png"
		présentation :: étiquette, texte vaut "Démonstration des composants graphiques en langage Linotte", x vaut 180, y vaut 5, couleurtexte vaut "rouge", couleurfond vaut "noir", taille vaut 3
		onglet :: onglet, x vaut 25, y vaut 30,hauteur vaut 500 , largeur vaut 720, visible vaut "non"
		indicateur :: indicateur, x vaut 180, y vaut 100, valeur vaut 0, largeur vaut 200, hauteur vaut 20, visible vaut "oui"
		m1 :: menu, texte vaut "Menu"
		sm1 :: sousmenu, texte vaut "A propos", icône vaut "medias/blanc.png"
		sm2 :: sousmenu, texte vaut "Quitter", icône vaut "medias/rouge.png"
		("Panneaux des onglets")
		panneau_toile :: panneau
		panneau_boutons :: panneau
		panneau_table :: panneau
		panneau_image :: panneau
		panneau_3D :: panneau
		panneau_radio :: panneau
		panneau_popup :: panneau
		panneau_fx :: panneau
		("onglet toile")
		xtoile :: xtoile, x vaut 0, y vaut 0
		zonex <- -2
		zoney <- -2
		zonew <- 4
		zoneh <- 4
		marqueur :: ligne, transparence vaut 50, taille vaut 1, couleur vaut "sable", y1 vaut 0, y2 vaut 500
		crayon :: crayon, couleur vaut "rouge",pointe vaut "non"
		fond :: toile,hauteur vaut 500, largeur vaut 720
		("onglet bouton")
		b1 :: bouton, texte vaut "Blanc", x vaut 30, y vaut 60, infobulle vaut "Ceci est une réponse...", icône vaut "medias/blanc.png", couleurtexte vaut "blanc", couleurfond vaut "noir"
		b2 :: bouton, texte vaut "Noir", x vaut 150, y vaut 60, infobulle vaut "Ceci est une réponse...", icône vaut "medias/rouge.png", couleurfond vaut "noir"
		l1 :: étiquette, texte vaut "Quelle est la couleur du cheval blanc d'Henri IV ?", x vaut 30, y vaut 30 (", infobulle vaut "Ceci est une question..."")
		l2 :: étiquette, texte vaut "", x vaut 30, y vaut 150
		("onglet table")
		table :: table, x vaut 10, y vaut 10,hauteur vaut 200 , largeur vaut 200
		b_table :: bouton, texte vaut "Afficher la table", x vaut 10, y vaut 230, couleurfond vaut "noir"
		b_ajouter :: bouton, texte vaut "Ajouter une ligne", x vaut 250, y vaut 30
		boite_table :: boite, x vaut 10, y vaut 260, largeur vaut 200, hauteur vaut 100
		ligne <- 3
		("onglet image")
		image :: ximage, x vaut 50, y vaut 50,hauteur vaut 300 , largeur vaut 400, source vaut "medias/villette1.jpg"
		photos :: casier de texte <- "medias/villette1.jpg", "medias/villette2.jpg", "medias/villette3.jpg"
		slider :: slider, x vaut 50, y vaut 370, minimum vaut 0, maximum vaut 2, valeur vaut 0
		l_image :: étiquette, texte vaut "Utilisez le slider pour changer l'image", x vaut 280, y vaut 375
		("onglet radio")
		panneau_radio_0 :: panneau, x vaut 200, y vaut 20, couleurfond vaut "gris perle", largeur vaut 300, hauteur vaut 350, visible vaut "oui"
		panneau_radio_1 :: panneau, x vaut 200, y vaut 20, couleurfond vaut "bleu fumée", largeur vaut 300, hauteur vaut 350, visible vaut "non"
		panneau_radio_2 :: panneau, x vaut 200, y vaut 20, couleurfond vaut "platine", largeur vaut 300, hauteur vaut 350, visible vaut "non"
		panneau_radio_3 :: panneau, x vaut 200, y vaut 20, couleurfond vaut "vanille", largeur vaut 300, hauteur vaut 350, visible vaut "non"
		liste :: liste, x vaut 10, y vaut 40
		valeurs :: casier de texte <- "Pierre", "Paul", "Jacques", "Matthieu", "Jean", "Barnard", "Hugo"
		boite_radio :: boite, x vaut 10, y vaut 240, largeur vaut 200, hauteur vaut 100
		explication0 :: étiquette, texte vaut "<-- choisissez un type de composant", x vaut 10, y vaut 10
		explication1 :: étiquette, texte vaut "Sélectionnez une ou plusieurs valeurs : ", x vaut 10, y vaut 10
		boutonradio 1 :: boutonradio, x vaut 10, y vaut 20, texte vaut "Les listes"
		boutonradio 2 :: boutonradio, x vaut 10, y vaut 90, texte vaut "Le sélecteur"
		boutonradio 3 :: boutonradio, x vaut 10, y vaut 160, texte vaut "Les cases à cocher"
		groupe :: groupeboutonradio
		explication3 :: étiquette, texte vaut "Au petit déjeuner, je veux : ", x vaut 10, y vaut 10
		explication4 :: étiquette, texte vaut "Composant xtableau :", x vaut 10, y vaut 220
		case 1 :: caseàcocher, x vaut 10, y vaut 60, texte vaut "Croissant"
		case 2 :: caseàcocher, x vaut 10, y vaut 100, texte vaut "Beurre"
		case 3 :: caseàcocher, x vaut 10, y vaut 140, texte vaut "Confiture"
		case 4 :: caseàcocher, x vaut 10, y vaut 180, texte vaut "Pain"
		tableau :: xtableau, x vaut 10, y vaut 240, largeur vaut 250, hauteur vaut 100
		l_sélecteur :: étiquette, texte vaut "Utilisez le sélecteur pour changer la couleur du panneau", x vaut 20, y vaut 5, taille vaut -1
		l_sélecteur_b :: étiquette, texte vaut "ou entrez directement le nom de la couleur", x vaut 20, y vaut 20, taille vaut -1
		sélecteur :: sélecteur, x vaut 20, y vaut 40, mode vaut "éditable"
		("pop-up")
		popup :: popup
		b_popup_1 :: bouton, texte vaut "Un message ...", x vaut 30, y vaut 10
		b_popup_2 :: bouton, texte vaut "Un message avec un icône ...", x vaut 30, y vaut 40
		b_popup_3 :: bouton, texte vaut "Une question ...", x vaut 30, y vaut 70
		b_popup_4 :: bouton, texte vaut "Une question avec un icône ...", x vaut 30, y vaut 100
		b_popup_5 :: bouton, texte vaut "Votre date de naissance ...", x vaut 30, y vaut 130
		champ1 :: champ, x vaut 250, y vaut 70, mode vaut "lecture"
		champ2 :: champ, x vaut 250, y vaut 100, mode vaut "secret"
		("fx")
		explication_fx :: étiquette, texte vaut "Changer la transparence de la fenêtre :", x vaut 10, y vaut 10
		slider_fx :: slider, x vaut 10, y vaut 30, minimum vaut 0, maximum vaut 100, valeur vaut 100
		case_bordure :: caseàcocher, x vaut 10, y vaut 70, texte vaut "Afficher la bordure de la fenêtre ?", valeur vaut "vrai"
		case_audessus :: caseàcocher, x vaut 10, y vaut 100, texte vaut "Fenêtre toujours au-dessus ?"

Principal :
	Rôles :
		§ colonnes :: casier de texte <- "Prénom", "Nom", "Âge"
	Actions :
		ajoute onglet & présentation & indicateur & m1 dans form
		ajoute sm1 & sm2 dans m1
		fais réagir sm1 à "clic souris" pour à propos
		fais réagir sm2 à "clic souris" pour fermer la fenêtre
		("Les boutons :")
		valeur @ indicateur vaut 10
		fais réagir form à "clic souris" pour fermer la fenêtre
		ajoute panneau_boutons dans onglet
		évoque onglet.titre("Le bouton",0)
		évoque onglet.icône("medias/onglet.png",0)
		ajoute b1 & b2 & l1 & l2 dans panneau_boutons
		fais réagir b2 à "clic souris" pour réponse fausse
		fais réagir b1 à "souris entrante" pour bouger bouton
		fais réagir b1 à "clic souris" pour bouger bouton
		("La toile :")
		valeur @ indicateur vaut 20
		ajoute panneau_toile dans onglet
		ajoute xtoile dans panneau_toile
		évoque onglet.titre("La toile",1)
		évoque onglet.icône("medias/onglet.png",1)
		appelle décor
		("Les tables :")
		valeur @ indicateur vaut 30
		ajoute panneau_table dans onglet
		évoque onglet.titre("La table",2)
		évoque onglet.icône("medias/onglet.png",2)
		ajoute table & b_table & boite_table & b_ajouter dans panneau_table
		fais réagir b_table à "clic souris" pour afficher table
		fais réagir b_ajouter à "clic souris" pour ajouter ligne
		évoque table.colonnes (colonnes)
		pour chaque ligne, _ table.ajouterligne()
		évoque table.valeur(0,0,"Gilbert")
		évoque table.valeur(0,1,"Dupond")
		évoque table.valeur(0,2,35)
		évoque table.valeur(1,0,"Robert")
		évoque table.valeur(1,1,"Dupont")
		évoque table.valeur(1,2,43)
		évoque table.valeur(2,0,"Hugo")
		évoque table.valeur(2,1,"Dupons")
		évoque table.valeur(2,2,29)
		pour chaque ligne, lis
			§c <- joker
			pour chaque 3, lis
				évoque table.écriture(c,joker,vrai)
			ferme
		ferme
		("L'image :")
		valeur @ indicateur vaut 40
		ajoute panneau_image dans onglet
		ajoute image & slider & l_image dans panneau_image
		évoque onglet.titre("Une image",3)
		évoque onglet.icône("medias/onglet.png",3)
		fais réagir slider à "clic souris" pour changer image
		("3D :")
		valeur @ indicateur vaut 50
		ajoute panneau_3D dans onglet
		évoque onglet.titre("Monde 3D",4)
		évoque onglet.icône("medias/onglet.png",4)
		parcours affichage onglet 3D
		("Boutons radio :")
		valeur @ indicateur vaut 60
		ajoute panneau_radio dans onglet
		_ onglet.titre("Panneaux",5)
		_ onglet.icône("medias/onglet.png",5)
		ajoute boutonradio 1 dans panneau_radio
		ajoute boutonradio 2 dans panneau_radio
		ajoute boutonradio 3 dans panneau_radio
		ajoute boutonradio 1 & boutonradio 2  & boutonradio 3 dans groupe
		ajoute panneau_radio_0 dans panneau_radio
		ajoute panneau_radio_1 dans panneau_radio
		ajoute panneau_radio_2 dans panneau_radio
		ajoute panneau_radio_3 dans panneau_radio
		ajoute explication0 dans panneau_radio_0
		fais réagir boutonradio 1 à "clic souris" pour bouton radio sélectionné 1
		fais réagir boutonradio 2 à "clic souris" pour bouton radio sélectionné 2
		fais réagir boutonradio 3 à "clic souris" pour bouton radio sélectionné 3
		ajoute liste dans panneau_radio_1
		ajoute boite_radio dans panneau_radio_1
		ajoute explication1 dans panneau_radio_1
		évoque liste.chargevaleurs(valeurs)
		évoque liste.sélectionmultiple()
		fais réagir liste à "clic souris" pour affichage radio 1
		ajoute l_sélecteur & l_sélecteur_b & sélecteur dans panneau_radio_2
		évoque sélecteur.chargevaleurs(couleurs)
		fais réagir sélecteur à "clic souris" pour changer la couleur
		ajoute explication3 & explication4 & tableau dans panneau_radio_3
		ajoute case 1 dans panneau_radio_3
		ajoute case 2 dans panneau_radio_3
		ajoute case 3 dans panneau_radio_3
		ajoute case 4 dans panneau_radio_3
		fais réagir case 1 à "clic souris" pour changer bouton
		fais réagir case 2 à "clic souris" pour changer bouton
		fais réagir case 3 à "clic souris" pour changer bouton
		fais réagir case 4 à "clic souris" pour changer bouton
		("Pop-up :")
		valeur @ indicateur vaut 70
		ajoute panneau_popup dans onglet
		("ajoute popup dans panneau_popup")
		évoque onglet.titre("Pop-up",6)
		évoque onglet.icône("medias/onglet.png",6)
		ajoute b_popup_1 dans panneau_popup
		fais réagir b_popup_1 à "clic souris" pour popup message
		ajoute b_popup_2 dans panneau_popup
		fais réagir b_popup_2 à "clic souris" pour popup message avec icône
		ajoute b_popup_3 dans panneau_popup
		ajoute champ1 dans panneau_popup
		fais réagir b_popup_3 à "clic souris" pour popup question
		ajoute b_popup_4 dans panneau_popup
		ajoute champ2 dans panneau_popup
		fais réagir b_popup_4 à "clic souris" pour popup question avec icône
		("fx")
		ajoute panneau_fx dans onglet
		évoque onglet.titre("Fx",7)
		évoque onglet.icône("medias/onglet.png",7)
		ajoute explication_fx & slider_fx & case_bordure & case_audessus dans panneau_fx
		fais réagir slider_fx à "clic souris" pour changer transparence
		fais réagir case_bordure à "clic souris" pour changer bordure
		fais réagir case_audessus à "clic souris" pour changer audessus

		("Affichage de tous les onglets :")
		visible@indicateur vaut "non"
		visible@onglet vaut "oui"
		("Boucle infinie :")
		tant que vrai, lis
			temporise
		ferme

("Pour l'affichage de la toile")

Décor :
	Rôles :
		§verre :: cercle, transparence vaut 50, taille vaut 10, couleur vaut "gris acier", rayon vaut 25, plein vaut "non"
		§tige :: ligne, transparence vaut 50, taille vaut 10, couleur vaut "queue-de-vache clair", x1 vaut -60, x2 vaut -25, y1 vaut -60, y2 vaut -25
		§loupe :: mégalithe, transparence vaut 50
	Actions :
		fusionne verre & tige dans loupe
		tant que vrai, lis
			efface la toile
			efface crayon
			projette fond & crayon & marqueur
			parcours fractale
			projette loupe
			tant que touche != "clique", lis
				déplace loupe vers sourisx + 25 et sourisy + 25
				temporise
			ferme
			efface loupe
			("effet zoom !")
			taille@verre vaut 1
			déplace verre vers sourisx + 25 et sourisy + 25
			projette verre
			pour chaque 30, lis
				taille@verre vaut joker
				rayon@verre vaut joker * 10
				attends 0.01 secondes
			ferme
			efface verre
			parcours zoom avec sourisx, sourisy
		ferme

Fractale :
	Rôles  :
		x & y & a & b :: nombre vide
		c1 & c2 & c3 :: nombre
	Actions :
		Pour x de 0 à largeur@fond, lis
			x1@marqueur vaut x
			x2@marqueur vaut x
			pour y de 0 à hauteur@fond, lis
				a vaut zonex + x * zonew / (largeur@fond)
				b vaut zoney + y * zoneh / (hauteur@fond)
				si converge(a,b) est vrai alors lis
					c1 vaut abs(entier(a * 55))
					c3 vaut 255 - abs(entier(a * 55))
					c2 vaut entier(abs(b * 255))
					couleur@crayon vaut c1 + " " + c2 + " " + c3
					pique crayon à x et y
				ferme
			ferme
		ferme
		reviens

Converge :
	Rôles :
		*a :: nombre
		*b :: nombre
		§x :: nombre
		§y :: nombre
		§ynew :: nombre
		§xnew :: nombre
	Actions :
		pour chaque 30, lis
			xnew = x * x - y * y + a
			ynew = 2 * x * y + b
			si ((abs xnew) sup 2) ou ((abs ynew) sup 2) est vrai alors retourne faux
			x vaut xnew
			y vaut ynew
		ferme
		retourne vrai

Zoom :
	Rôles :
		*newx :: nombre
		*newy :: nombre
		§scale :: nombre
	Actions :
		scale vaut zonew / (largeur@fond)
		zonex vaut zonex + newx * scale
		zoney vaut zoney + newy * scale
		zonew vaut 50 * scale
		zoneh vaut 50 * scale
		reviens

("Pour l'onglet bouton")

Réponse fausse :
	Rôles :
		*b :: bouton
	Actions :
		Texte @ l2 vaut "Tu es bien trop mauvais pour continuer le test !"
		attends 3 secondes
		Reviens

Bouger bouton :
	Rôles :
		*b :: bouton
		posx <- 320
		posy <- 220
	Actions :
		mélange posx & posy
		x @ b1 vaut posx + 30
		y @ b1 vaut posy + 30
		Reviens

("Pour l'onglet table")

Afficher table :
	Rôles :
		*b :: bouton
		§contenu :: texte vide
	Actions :
		pour chaque ligne, lis
			contenu vaut contenu + table.retournevaleur(joker,0) + " " + table.retournevaleur(joker,1) + " à " + table.retournevaleur(joker,2) + " ans"
			contenu vaut contenu + chr 13 + chr 10
		ferme
		texte @ boite_table vaut contenu
		reviens

Ajouter ligne :
	Rôles :
		*b :: bouton
	Actions :
		évoque table.ajouterligne()
		incrémente ligne
		évoque table.valeur(ligne-1,0,"")
		évoque table.valeur(ligne-1,1,"")
		évoque table.valeur(ligne-1,2,0)
		évoque table.écriture(ligne-1,0,vrai)
		évoque table.écriture(ligne-1,1,vrai)
		évoque table.écriture(ligne-1,2,vrai)
		reviens

("Pour l'onglet image")

Changer image :
	Rôles :
		*slider :: slider
	Actions :
		source@image vaut photos{valeur@slider}
		reviens

Fermer la fenêtre :
	Actions :
		termine

Affichage onglet 3D :
	Rôles :
		internet :: bouton, texte vaut "Java 3D n'est pas installé... Cliquez ici pour le télécharger !", x vaut 10, y vaut 10, couleurfond vaut "rouge"
	actions :
		essaie, lis
			parcours Affichage 3D
		ferme
		sinon, lis
			ajoute internet dans panneau_3D
			fais réagir internet à "clic souris" pour ouvrir java 3D
		ferme
		reviens

Affichage 3D :
	Rôles :
		monde :: monde3D, x vaut 0, y vaut 0,largeur vaut 720, hauteur vaut 500
		forme ::cube3D, rayon vaut 0.5, transparence vaut .5
		sphere :: sphere3D, rayon vaut 0.3, couleur vaut "rouge", transparence vaut 0.7, texture vaut "medias/earthTexture.jpg"
		message :: texte3D, texte vaut "Vive la 3D avec le langage Linotte !", taille vaut -1, couleur vaut "sable", police vaut "Arial"
		tempo :: nombre <- 0
	actions :
		ajoute monde dans panneau_3D
		ajoute forme & sphere & message dans monde
		appelle boucle 3D
		reviens

Boucle 3D :
	Rôles :
		forme ::cube3D
		sphere :: sphere3D
		message :: texte3D
		tempo :: nombre <- 0
	actions :
		tant que vrai, lis
			évoque forme.rotationx(0.04)
			évoque forme.rotationy(0.03)
			évoque forme.rotationz(0.01)
			évoque message.translation(0,0,-0.01)
			évoque sphere.translation(0,cos(tempo)/100,0)
			évoque sphere.rotationy(-0.02)
			incrémente tempo
			attends 0.03 seconde
		ferme

Ouvrir java 3D :
	actions :
		Explore "internet http://java3d.java.net/"
		reviens

("Pour l'onglet radio")

Affichage radio 1 :
	Rôles :
		*l :: liste
		§champ :: texte
	Actions :
		pour chaque liste.valeurs(), lis
			champ vaut champ + joker + ";
"
		ferme
		texte @ boite_radio vaut champ
		reviens

Bouton radio sélectionné 1 :
	Rôles :
		*br :: boutonradio
	Actions :
		visible@panneau_radio_0 vaut "non"
		visible@panneau_radio_1 vaut "oui"
		visible@panneau_radio_2 vaut "non"
		visible@panneau_radio_3 vaut "non"
		reviens

Bouton radio sélectionné 2 :
	Rôles :
		*br :: boutonradio
	Actions :
		visible@panneau_radio_0 vaut "non"
		visible@panneau_radio_1 vaut "non"
		visible@panneau_radio_2 vaut "oui"
		visible@panneau_radio_3 vaut "non"
		reviens

Bouton radio sélectionné 3 :
	Rôles :
		*br :: boutonradio
	Actions :
		visible@panneau_radio_0 vaut "non"
		visible@panneau_radio_1 vaut "non"
		visible@panneau_radio_2 vaut "non"
		visible@panneau_radio_3 vaut "oui"
		reviens

Changer bouton :
	Rôles :
		*cac :: caseàcocher
	Actions :
		affiche texte@cac + ": " + valeur@cac
		reviens

Changer la couleur :
	Rôles :
		*s :: sélecteur
	Actions :
		couleurfond@panneau_radio_2 vaut valeur @ s
		reviens

Popup message :
	Rôles :
		*s :: bouton
	Actions :
		évoque popup.message("C'est simple d'afficher un message !")
		reviens

Popup message avec icône :
	Rôles :
		*s :: bouton
	Actions :
		évoque popup.messageeticône("C'est simple d'afficher un message avec un icône !","medias/rouge.png")
		reviens

Popup question :
	Rôles :
		*s :: bouton
		§options :: casier de texte <- "génial", "excellent", "indispensable"
	Actions :
		texte@champ1 vaut popup.question("Penses-tu que Linotte est un langage",options)
		reviens

Popup question avec icône :
	Rôles :
		*s :: bouton
		§options :: casier de texte <- "génial", "excellent", "indispensable"
	Actions :
		texte@champ2 vaut popup.questioneticône("Penses-tu que Linotte est un langage",options,"medias/blanc.png")
		reviens

Popup date :
	Rôles :
		*s :: bouton
	Actions :
		("texte@champ3 vaut popup.sélectionnerdate()")
		reviens

à propos :
	Actions :
		évoque popup.message("Ceci est une application de démonstration")
		reviens

Changer transparence :
	Rôles :
		*slider :: slider
	Actions :
		évoque form.transparence(valeur@slider)
		reviens

Changer bordure :
	Rôles :
		*cac :: caseàcocher
	Actions :
		si (valeur@cac) == "vrai" alors évoque form.bordure(vrai)
		sinon, évoque form.bordure(faux)
		reviens

Changer audessus :
	Rôles :
		*cac :: caseàcocher
	Actions :
		si (valeur@cac) == "vrai" alors évoque form.audessus(vrai)
		sinon, évoque form.audessus(faux)
		reviens
