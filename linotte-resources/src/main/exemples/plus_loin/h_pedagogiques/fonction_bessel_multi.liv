// Source : http://proglab.fr/demo/
globale
	fond est une toile, couleur prend "blanc", largeur prend 400, hauteur prend 300

// Représentation de la fonction z(x, y) = sin(√(x²+y²)) / √(x²+y²)
// en perspective isométrique.
// Vous pouvez modifier les paramètres r et n.
// Cet algorithme pourrait largement être optimisé.

Bessel :
	n & i & j & k & r & x & y & δ & d & z est un nombre
	x2d est un casier de nombres
	y2d est un casier de nombres
	c est un casier de textes
	début
		~ angle radian
		//Rayon. On trace pour x∈[-r , r] et y∈[-r , r]
		r prend 20
		// Nombre de "tranches" - À partir de 200-300, on ne voit plus grand-chose
		n prend 80
		// Largeur de chaque tranche.
		δ prend 2 / (n - 1)
		// Calcul des points et conversion en 2D
		i prend 0
		x prend -1
		pour j de 0 à n-1
			y prend -1
			pour k de 0 à n-1
				d prend racine(carré x + carré y) * r
				z prend sin(d)/d
				ajoute 200 - x*100 + y*100 dans x2d
				ajoute 150 + x*55 + y*55 - z*100 dans y2d
				ajoute abs(entier(155*x)) + " " + abs(entier(105*y)) + " " + abs(entier(200*z)) dans c
				incrémente i
				y prend y + δ
			ferme
			x prend  x + δ
		ferme
		// Initialisation de l'affichage
		projette fond	
		// Tracé. On fait des tranches le long de l'axe des abscisses.
		i prend 0
		pour j de 0 à n-1
			appelle tortue avec #i, n, x2d, y2d, c
			i prend i + n
			attends 100 millisecondes
		ferme
		observe tortue

tortue :
	*i est un nombre
	*n est un nombre
	*x2d est un casier de nombres
	*y2d est un casier de nombres
	*c est un casier de nombres
	tortue est un crayon, couleur prend c{i}, pointe prend "non", x prend x2d{i}, y prend y2d{i}
	début
		projette tortue
		pour i de i à i + n-1
			couleur de tortue prend c{i}
			déplace tortue vers  x2d{i} et y2d{i}
			attends 20 millisecondes
		ferme
		reviens